package chatclient;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import javax.swing.JOptionPane;

public class RunLogin extends javax.swing.JFrame {

   private static SocketChannel socket;
   private final ByteBuffer buf = ByteBuffer.allocate(10);

   /**
    * Creates new form ChatClientUI
    */
   public RunLogin() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      jTextPane1 = new javax.swing.JTextPane();
      loginBtn = new javax.swing.JButton();
      registerBtn = new javax.swing.JButton();
      usernameTxt = new javax.swing.JTextField();
      usernameLbl = new javax.swing.JLabel();
      passwordLbl = new javax.swing.JLabel();
      passwordTxt = new javax.swing.JPasswordField();
      removeBtn = new javax.swing.JButton();
      replyTxt = new javax.swing.JLabel();

      jScrollPane1.setViewportView(jTextPane1);

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      loginBtn.setText("Login");
      loginBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            loginBtnActionPerformed(evt);
         }
      });

      registerBtn.setText("Register");
      registerBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            registerBtnActionPerformed(evt);
         }
      });

      usernameLbl.setText("Username");

      passwordLbl.setText("Password");

      removeBtn.setText("Remove");
      removeBtn.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeBtnActionPerformed(evt);
         }
      });

      replyTxt.setForeground(new java.awt.Color(0, 102, 204));
      replyTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      replyTxt.setText("Login ok");
      replyTxt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(loginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(registerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                  .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addGap(41, 41, 41)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(usernameTxt, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(passwordTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(passwordLbl))
                     .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(usernameLbl))
                     .addComponent(replyTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(30, 30, 30)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(usernameLbl)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(passwordLbl)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(12, 12, 12)
            .addComponent(replyTxt)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(loginBtn)
               .addComponent(registerBtn)
               .addComponent(removeBtn))
            .addContainerGap())
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
      String username = usernameTxt.getText();
      String password = passwordTxt.getText();
      if (username != null && password != null && !"".equals(username) && !"".equals(password)) {
         StringBuilder sb = new StringBuilder(":login ");
         sb.append(username).append(" ").append(password).append("\n");
         try {
            say(sb.toString());
            switch (getReply()) {
               case ":ok":
                  setVisible(false);
                  usernameTxt.setText("");
                  passwordTxt.setText("");
                  RunChat runChat = new RunChat(this, socket);
                  runChat.setVisible(true);
                  break;
               case ":ko":
                  replyTxt.setText("Login invalid!");
                  break;
            }
         } catch (IOException e) {
            errorBox(e.getMessage());
         }
      }
   }//GEN-LAST:event_loginBtnActionPerformed

   private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
      String username = usernameTxt.getText();
      String password = passwordTxt.getText();
      if (username != null && password != null && !"".equals(username) && !"".equals(password)) {
         StringBuilder sb = new StringBuilder(":create ");
         sb.append(username).append(" ").append(password).append("\n");
         try {
            say(sb.toString());
            switch (getReply()) {
               case ":ok":
                  replyTxt.setText("Create ok!");
                  break;
               case ":ko":
                  replyTxt.setText("Create invalid!");
                  break;
            }
         } catch (IOException e) {
            errorBox(e.getMessage());
         }
      }
   }//GEN-LAST:event_registerBtnActionPerformed

   private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
      String username = usernameTxt.getText();
      String password = passwordTxt.getText();
      if (username != null && password != null && !"".equals(username) && !"".equals(password)) {
         StringBuilder sb = new StringBuilder(":remove ");
         sb.append(username).append(" ").append(password).append("\n");
         try {
            say(sb.toString());
            switch (getReply()) {
               case ":ok":
                  replyTxt.setText("Remove ok!");
                  break;
               case ":ko":
                  replyTxt.setText("Remove invalid!");
                  break;
            }
         } catch (IOException e) {
            errorBox(e.getMessage());
         }
      }
   }//GEN-LAST:event_removeBtnActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(RunLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(RunLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(RunLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(RunLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
      try {
         socket = SocketChannel.open();
         socket.connect(new InetSocketAddress("localhost", 1111));
      } catch (IOException e) {
         errorBox(e.getMessage());
         return;
      }

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(() -> {
         RunLogin chatClient = new RunLogin();
         chatClient.replyTxt.setText("");
         chatClient.setVisible(true);
      });
   }

   private void say(byte[] whatToSay) throws IOException {
      socket.write(ByteBuffer.wrap(whatToSay));
   }

   private void say(String whatToSay) throws IOException {
      say(whatToSay.getBytes());
   }

   private String getReply() throws IOException {
      socket.read(buf);
      buf.flip();
      byte[] ba = new byte[buf.remaining()];
      buf.get(ba);
      buf.clear();
      return new String(ba);
   }

   private static void errorBox(String infoMessage) {
      JOptionPane.showMessageDialog(null, infoMessage, "Something Went Wrong", JOptionPane.ERROR_MESSAGE);
   }

   /*
    Btn - button
    Lbl - label
    Txt - text field
    */

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextPane jTextPane1;
   private javax.swing.JButton loginBtn;
   private javax.swing.JLabel passwordLbl;
   private javax.swing.JPasswordField passwordTxt;
   private javax.swing.JButton registerBtn;
   private javax.swing.JButton removeBtn;
   private javax.swing.JLabel replyTxt;
   private javax.swing.JLabel usernameLbl;
   private javax.swing.JTextField usernameTxt;
   // End of variables declaration//GEN-END:variables
}
