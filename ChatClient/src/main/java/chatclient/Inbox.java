/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclient;

import com.google.gson.Gson;
import common.representations.MessageRepresentation;
import common.representations.RoomRepresentation;
import common.representations.TalkRepresentation;
import common.representations.UsersRepresentation;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author pc-user
 */
public class Inbox extends JFrame {

   private final int MAXLEN = 1024;
   private SocketChannel socket;
   private String selectedUser;

   /**
    * Creates new form RunChat
    */
   public Inbox(SocketChannel socket) {
      initComponents();
      alwaysScrollDown();
      this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
      this.addWindowListener(new WindowAdapter() {
         @Override
         public void windowClosing(WindowEvent e) {
            dispose();
         }
      });
      this.selectedUser = "";
      this.socket = socket;
      try {
         say(":iu\n");
      } catch (IOException ex) {
         errorBox(ex.getMessage());
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPopupMenu1 = new javax.swing.JPopupMenu();
      jDialog1 = new javax.swing.JDialog();
      jScrollPane1 = new javax.swing.JScrollPane();
      usersList = new javax.swing.JList();
      jScrollPane2 = new javax.swing.JScrollPane();
      messageTxt = new javax.swing.JTextArea();
      privateTxt = new javax.swing.JTextField();

      javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
      jDialog1.getContentPane().setLayout(jDialog1Layout);
      jDialog1Layout.setHorizontalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      jDialog1Layout.setVerticalGroup(
         jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setFocusable(false);
      setMinimumSize(new java.awt.Dimension(600, 410));

      jScrollPane1.setViewportView(usersList);

      messageTxt.setEditable(false);
      messageTxt.setColumns(20);
      messageTxt.setRows(5);
      jScrollPane2.setViewportView(messageTxt);

      privateTxt.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            privateTxtActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
               .addComponent(privateTxt))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jScrollPane2)
                  .addGap(18, 18, 18)
                  .addComponent(privateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))
            .addContainerGap())
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void privateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateTxtActionPerformed
      try {
         if (!"".equals(selectedUser)) {
            say(new StringBuilder(":private ").append(selectedUser).append(" ").append(privateTxt.getText()).append("\n").toString());
            privateTxt.setText("");
            say(new StringBuilder(":talk ").append(selectedUser).append("\n").toString());
            // do this more efficiently
         }
      } catch (IOException ex) {
         errorBox(ex.getMessage());
      }
   }//GEN-LAST:event_privateTxtActionPerformed

   protected void updateUsers(String users) {
      UsersRepresentation rr = new Gson().fromJson(users, UsersRepresentation.class);
      DefaultListModel dlm = new DefaultListModel();
      for (String user : rr.getUsers()) {
         dlm.addElement(user);
      }
      clearList();
      usersList.setModel(dlm);

      addUsersOneClickAction();
      System.out.println(users);
   }

   protected void updateTalk(String talk) {
      TalkRepresentation tr = new Gson().fromJson(talk, TalkRepresentation.class);
      messageTxt.setText("");
      for (MessageRepresentation m : tr.getMessages()) {
         messageTxt.append(m.toString());
      }
   }

   private void addUsersOneClickAction() {
      usersList.addMouseListener(new MouseAdapter() {
         @Override
         public void mouseClicked(MouseEvent evt) {
            if (evt.getClickCount() == 2) {
               try {
                  selectedUser = (String) usersList.getSelectedValue();
                  say(new StringBuilder(":talk ").append(selectedUser).append("\n").toString());
               } catch (IOException ex) {
                  errorBox(ex.getMessage());
               }
            }
         }
      });
   }

   private void clearList() {
      usersList = new javax.swing.JList();
      jScrollPane1.setViewportView(usersList);
   }

   private void alwaysScrollDown() {
      DefaultCaret caret = (DefaultCaret) messageTxt.getCaret();
      caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
   }

   private static void errorBox(String infoMessage) {
      JOptionPane.showMessageDialog(null, infoMessage, "Something Went Wrong", JOptionPane.ERROR_MESSAGE);
   }

   private void say(byte[] whatToSay) throws IOException {
      socket.write(ByteBuffer.wrap(whatToSay));
   }

   private void say(String whatToSay) throws IOException {
      say(whatToSay.getBytes());
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JDialog jDialog1;
   private javax.swing.JPopupMenu jPopupMenu1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTextArea messageTxt;
   private javax.swing.JTextField privateTxt;
   private javax.swing.JList usersList;
   // End of variables declaration//GEN-END:variables

}
